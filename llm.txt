bitUI Framework Documentation
=======================================

Overview
--------
bitUI is a simple, lightweight CSS framework for creating clean, responsive web layouts. It provides a straightforward approach to building websites with minimal complexity. The framework focuses on control and simplicity through a unified grid system, panel components, and utility classes.

Core Concepts
------------

1. Unified Grid System
   - Traditional 12-column grid with row > col structure
   - Auto grid for responsive, automatically sized columns
   - Fixed column grid with specific column counts (cols-1 through cols-6)
   - Masonry grid layouts with dense packing options
   - Mobile-first approach where all columns become full-width on small screens
   - Responsive breakpoints for different screen sizes

2. Grid Item Sizing
   - Standard column classes: col-1 through col-12 for traditional grid
   - Special sizing classes for grid layouts: .wide, .tall, .large
   - Auto-fill and auto-fit options for different responsive behaviors
   - Dense packing for masonry-style layouts

3. Panels
   - Container elements for content with consistent padding and styling
   - Two variants: 'panel dark' and 'panel light' with appropriate background colors
   - Automatically adjusts colors based on selected theme
   - Standard border-radius and padding across the framework

4. Themes
   - Four built-in themes: light, warm, dim, and dark
   - Applied using the 'data-theme' attribute on the HTML element
   - Each theme includes a complete color palette for backgrounds, text, panels, and UI elements
   - Smooth transitions between theme changes

5. Layout & Positioning
   - Column positioning: .center, .right, .left for individual columns
   - Row alignment: row.center, row.right, row.left for groups of columns
   - Text alignment classes: 'left', 'right', 'center', 'justify'
   - Containers have auto margins and responsive width constraints

6. Typography
   - Uses Roboto Mono as the base font with variable font weights
   - Font weight utilities: 'f-light' (100), 'f-regular' (400), 'f-heavy' (900)
   - Font size utilities: 'f-small' (0.75×), 'f-large' (1.25×)
   - Color classes for text: f-danger, f-confirm, f-info, f-warning, f-white, f-black, f-gray

7. Form Elements
   - Consistent styling for input, textarea, select elements
   - States: default, focus, disabled, danger, confirm
   - Support for various input types (text, password, checkbox, radio, range)
   - Appropriate visual feedback for different states and themes

8. Buttons
   - Various button styles: confirm, info, danger, warning, holo, disabled
   - Full-width design with consistent padding and border-radius
   - Hover effects for interactive feedback
   - Adapts to theme colors automatically

CSS Variables
------------
The framework uses CSS variables for easy customization:

- Layout: --container-width, --column-gap, --border-radius, --panel-padding-x, --panel-padding-y
- Typography: --font-family-base, --font-size-base, --font-weight-base, --line-height-base
- Colors: --bg-color, --text-color, --heading-color, --panel-bg, --panel-dark-bg, --panel-border
- Semantic colors: --danger, --warning, --confirm, --info (with hover variants)

Usage Examples
------------

Traditional Column Grid:
```html
<div class="container">
  <div class="row">
    <div class="col-6">
      <div class="panel dark">
        <h2>Left Column</h2>
        <p>This is a 6-column panel with dark styling.</p>
      </div>
    </div>
    <div class="col-6">
      <div class="panel light">
        <h2>Right Column</h2>
        <p>This is a 6-column panel with light styling.</p>
      </div>
    </div>
  </div>
</div>
```

Auto Grid:
```html
<div class="grid">
  <div>
    <div class="panel dark">Auto Grid Item 1</div>
  </div>
  <div>
    <div class="panel dark">Auto Grid Item 2</div>
  </div>
  <div>
    <div class="panel dark">Auto Grid Item 3</div>
  </div>
</div>
```

Masonry Grid:
```html
<div class="grid dense">
  <div class="tall">
    <div class="panel dark">Tall Item</div>
  </div>
  <div>
    <div class="panel dark">Normal Item</div>
  </div>
  <div class="wide">
    <div class="panel dark">Wide Item</div>
  </div>
</div>
```

Implementation Notes
-------------------
1. The framework is designed to work with no JavaScript
2. All styling is handled through CSS only
3. Responsive design principles are applied throughout
4. The framework is extremely lightweight compared to alternatives
5. Compatible with modern browsers that support CSS Grid and CSS Variables
6. Uses CSS @import to organize styles into separate files
7. Requires a local HTTP server when working locally (e.g., python3 -m http.server)