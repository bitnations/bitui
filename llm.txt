bitUI Framework Documentation
=======================================

Overview
--------
bitUI is a simple, lightweight CSS framework for creating clean, responsive web layouts. It provides a straightforward approach to building websites with minimal complexity. The framework focuses on control and simplicity through a clean grid system, panel components, and utility classes.

Core Concepts
------------

1. Grid System
   - Uses a standard 12-column grid layout (col-1 through col-12)
   - Basic structure: row > col > panel
   - Mobile-first approach where all columns become full-width on small screens
   - Responsive breakpoint at 768px for desktop layouts
   - Supports nesting of rows and columns for complex layouts

2. Flex Columns
   - Special 'col-flex' class that automatically adjusts based on container width
   - Uses CSS container queries to determine optimal column width
   - Breakpoints from 50rem to 300rem, automatically adjusting columns from 2 to 12
   - Perfect for card layouts, galleries, or any repeating content

3. Panels
   - Container elements for content with consistent padding and styling
   - Two variants: 'panel dark' and 'panel light' with appropriate background colors
   - Automatically adjusts colors based on selected theme
   - Standard border-radius and padding across the framework

4. Themes
   - Four built-in themes: light, warm, dim, and dark
   - Applied using the 'data-theme' attribute on the HTML element
   - Each theme includes a complete color palette for backgrounds, text, panels, and UI elements
   - Smooth transitions between theme changes

5. Layout & Positioning
   - Flex utility classes: 'flex left', 'flex center', 'flex right' for horizontal alignment
   - Text alignment classes: 'left', 'right', 'center', 'justify'
   - Containers have auto margins and responsive width constraints

6. Typography
   - Uses Roboto Mono as the base font with variable font weights
   - Font weight utilities: 'f-light' (100), 'f-regular' (400), 'f-heavy' (900)
   - Font size utilities: 'f-small' (0.75×), 'f-large' (1.25×)
   - Color classes for text: f-danger, f-confirm, f-info, f-warning, f-white, f-black, f-gray

7. Form Elements
   - Consistent styling for input, textarea, select elements
   - States: default, focus, disabled, danger, confirm
   - Support for various input types (text, password, checkbox, radio, range)
   - Appropriate visual feedback for different states and themes

8. Buttons
   - Various button styles: confirm, info, danger, warning, holo, disabled
   - Full-width design with consistent padding and border-radius
   - Hover effects for interactive feedback
   - Adapts to theme colors automatically

9. Alerts
   - Message styling with confirm, notice, and danger variants
   - Fade-in animation for smooth appearance
   - Includes dismiss button styling

CSS Variables
------------
The framework uses CSS variables for easy customization:

- Layout: --container-width, --column-gap, --border-radius, --panel-padding-x, --panel-padding-y
- Typography: --font-family-base, --font-size-base, --font-weight-base, --line-height-base
- Colors: --bg-color, --text-color, --heading-color, --panel-bg, --panel-dark-bg, --panel-border
- Semantic colors: --danger, --warning, --confirm, --info (with hover variants)

Usage Example
------------
```html
<div class="container">
  <div class="row">
    <div class="col-6">
      <div class="panel dark">
        <h2>Left Column</h2>
        <p>This is a 6-column panel with dark styling.</p>
      </div>
    </div>
    <div class="col-6">
      <div class="panel light">
        <h2>Right Column</h2>
        <p>This is a 6-column panel with light styling.</p>
      </div>
    </div>
  </div>
  
  <div class="row">
    <div class="col-12">
      <div class="panel light">
        <h2 class="center">Flex Columns Example</h2>
        <div class="row">
          <div class="col-flex">
            <div class="panel dark">Content 1</div>
          </div>
          <div class="col-flex">
            <div class="panel dark">Content 2</div>
          </div>
          <div class="col-flex">
            <div class="panel dark">Content 3</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
```

Implementation Notes
-------------------
1. The framework is designed to work with no JavaScript
2. All styling is handled through CSS only
3. Responsive design principles are applied throughout
4. The framework is extremely lightweight compared to alternatives
5. Compatible with modern browsers that support CSS Variables and container queries